// <auto-generated />
using System;
using BancaTCC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BancaTCC.Migrations
{
    [DbContext(typeof(BancaTCCContext))]
    [Migration("20241212213849_initial19")]
    partial class initial19
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BancaMembroExterior", b =>
                {
                    b.Property<int>("BancasId")
                        .HasColumnType("int");

                    b.Property<int>("MembroExterioresId")
                        .HasColumnType("int");

                    b.HasKey("BancasId", "MembroExterioresId");

                    b.HasIndex("MembroExterioresId");

                    b.ToTable("BancaMembroExterior");
                });

            modelBuilder.Entity("BancaProfessor", b =>
                {
                    b.Property<int>("BancasId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessoresId")
                        .HasColumnType("int");

                    b.HasKey("BancasId", "ProfessoresId");

                    b.HasIndex("ProfessoresId");

                    b.ToTable("BancaProfessor", (string)null);
                });

            modelBuilder.Entity("BancaTCC.Models.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("BancaTCC.Models.Banca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("HoraFim")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<int?>("MembroExteriorId")
                        .HasColumnType("int");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrabalhoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Bancas");
                });

            modelBuilder.Entity("BancaTCC.Models.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BancaId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BancaId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("BancaTCC.Models.MembroExterior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BancaId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.ToTable("MembrosExternos");
                });

            modelBuilder.Entity("BancaTCC.Models.Orientador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrdemPreferencia")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId")
                        .IsUnique();

                    b.ToTable("OrientadoresIndicados");
                });

            modelBuilder.Entity("BancaTCC.Models.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BancaId")
                        .HasColumnType("int");

                    b.Property<int?>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Professores");
                });

            modelBuilder.Entity("BancaTCC.Models.Trabalho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<int?>("BancaId")
                        .HasColumnType("int");

                    b.Property<int?>("OrientadorId")
                        .HasColumnType("int");

                    b.Property<string>("TrabalhoArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrabalhoGitLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrabalhoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrabalhoTema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("BancaId");

                    b.HasIndex("OrientadorId");

                    b.ToTable("Trabalhos");
                });

            modelBuilder.Entity("Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AutorId")
                        .HasColumnType("int");

                    b.Property<int>("CargaHoraria")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfessorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("CursoProfessor", b =>
                {
                    b.Property<int>("CursosId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessoresId")
                        .HasColumnType("int");

                    b.HasKey("CursosId", "ProfessoresId");

                    b.HasIndex("ProfessoresId");

                    b.ToTable("CursoProfessor", (string)null);
                });

            modelBuilder.Entity("BancaMembroExterior", b =>
                {
                    b.HasOne("BancaTCC.Models.Banca", null)
                        .WithMany()
                        .HasForeignKey("BancasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BancaTCC.Models.MembroExterior", null)
                        .WithMany()
                        .HasForeignKey("MembroExterioresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BancaProfessor", b =>
                {
                    b.HasOne("BancaTCC.Models.Banca", null)
                        .WithMany()
                        .HasForeignKey("BancasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BancaTCC.Models.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BancaTCC.Models.Autor", b =>
                {
                    b.HasOne("Curso", "Curso")
                        .WithMany("Autores")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("BancaTCC.Models.Comentario", b =>
                {
                    b.HasOne("BancaTCC.Models.Banca", "Banca")
                        .WithMany("Comentarios")
                        .HasForeignKey("BancaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BancaTCC.Models.Professor", "Professor")
                        .WithMany("Comentarios")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Banca");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("BancaTCC.Models.Orientador", b =>
                {
                    b.HasOne("BancaTCC.Models.Professor", "Professor")
                        .WithOne()
                        .HasForeignKey("BancaTCC.Models.Orientador", "ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("BancaTCC.Models.Trabalho", b =>
                {
                    b.HasOne("BancaTCC.Models.Autor", "Autor")
                        .WithMany("Trabalhos")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BancaTCC.Models.Banca", "Banca")
                        .WithMany("Trabalhos")
                        .HasForeignKey("BancaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BancaTCC.Models.Orientador", null)
                        .WithMany("Trabalhos")
                        .HasForeignKey("OrientadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Autor");

                    b.Navigation("Banca");
                });

            modelBuilder.Entity("CursoProfessor", b =>
                {
                    b.HasOne("Curso", null)
                        .WithMany()
                        .HasForeignKey("CursosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BancaTCC.Models.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BancaTCC.Models.Autor", b =>
                {
                    b.Navigation("Trabalhos");
                });

            modelBuilder.Entity("BancaTCC.Models.Banca", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Trabalhos");
                });

            modelBuilder.Entity("BancaTCC.Models.Orientador", b =>
                {
                    b.Navigation("Trabalhos");
                });

            modelBuilder.Entity("BancaTCC.Models.Professor", b =>
                {
                    b.Navigation("Comentarios");
                });

            modelBuilder.Entity("Curso", b =>
                {
                    b.Navigation("Autores");
                });
#pragma warning restore 612, 618
        }
    }
}
